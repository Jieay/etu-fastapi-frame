# -*- coding: utf-8 -*-
# @Time    : 2023/6/1 11:45
# @Author  : Jieay
# @File    : __init__.py
"""
在 FastAPI 项目中，`models`（模型）用于定义与数据库交互的数据结构和行为。它们通常与 ORM（对象关系映射）库（如 SQLAlchemy 或
Tortoise ORM）一起使用，用于将数据库表映射为 Python 对象，并提供对数据库的操作。

`models` 的作用包括：

1. 定义数据库表结构：通过定义 `models`，可以将数据库中的表结构映射到 Python 对象。每个模型类通常对应一个数据库表，模型类中的属性对应表中的列。

2. 数据库操作：`models` 提供了对数据库的增删改查操作的方法和接口。通过调用这些方法，可以方便地对数据库进行查询、插入、更新和删除操作。

3. 数据验证：在模型类中，可以定义属性的数据类型、格式和约束，用于验证输入的数据的有效性。这样可以确保数据的完整性和正确性，
    防止无效或不合法的数据进入数据库。

4. ORM 功能：`models` 通常与 ORM 库紧密结合使用，可以利用 ORM 提供的功能，如关联关系、查询构建器、事务管理等。
    这样可以更方便地进行复杂的数据库操作，实现数据的关联和高级查询。

5. 数据序列化和反序列化：`models` 可以将数据库中的数据序列化为 Python 对象，或将 Python 对象反序列化为数据库中的数据。
    这样可以方便地在应用程序和数据库之间进行数据的转换和交互。

通过使用 `models`，我们可以将数据库操作抽象为面向对象的模型操作，提供了更高层次的抽象和封装。这样可以简化数据库操作的代码，
提高开发效率和代码的可维护性。同时，`models` 也使得数据模型在应用程序中更易于理解和使用，提供了更好的代码组织和结构。
"""
from .user import User
